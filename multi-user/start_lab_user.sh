#!/bin/bash
# --------------------------------------------------------------------------------------------------
#   Stellars JupyterLab DS Platform Deployment Script
#
#   Author      : Stellars Henson                   
#   Script Name : start_lab_user.sh
#   Description : 
#     Interactive shell script to deploy a personalized JupyterLab data science environment
#     using Docker Compose. Supports both GPU and non-GPU configurations. 
#
#     Features:
#       - Prompts for LAB_USER and authentication token
#       - Auto-generates a unique environment with dedicated URLs
#       - Allows selection between CPU-only and GPU-enabled compose setups
#       - Auto-fetches missing compose files from remote repository
#       - Configures override for external traefik network if traefik is active
#       - Outputs deployment summary and confirms execution
#       - Generates environment-specific `.env` file
#       - Launches containers with Docker Compose and profiles
#
#   Prerequisites:
#       - 'dialog' CLI tool must be installed (sudo apt install dialog)
#       - Docker and Docker Compose must be installed and available in PATH
#
#   Output:
#       - Deployment summary with service URLs
#       - Environment file for future reference
#
#   Project Home : https://github.com/stellarshenson/stellars-jupyterlab-ds
#   License      : MIT
# --------------------------------------------------------------------------------------------------

# create resources dir if doesn't exist
RESOURCES_DIR="resources"
[[ -d ${RESOURCES_DIR} ]] || mkdir ${RESOURCES_DIR}

# Generare override file for traefik, watchtower and network
COMPOSE_OVERRIDE_FILE="${RESOURCES_DIR}/compose-override.yml"
[[ -f $COMPOSE_OVERRIDE_FILE ]] || cat << EOF > $COMPOSE_OVERRIDE_FILE
# --------------------------------------------------------------------------------------------------
#   AUTOGENERATED
#
#   Stellars Jupyterlab DS Platform 
#   Project Home: https://github.com/stellarshenson/stellars-jupyterlab-ds
#   This file is used as an extension to every profile and launched with every profile
#   It disables traefik and watchtower services from compose.yml and makes proxy network 'external'
# --------------------------------------------------------------------------------------------------
services:
  ## disable traefik using profiles
  traefik:
    profiles: [disabled]
  ## disable watchtower using profiles
  watchtower:
    profiles: [disabled]
networks:
  ## mark proxy-network as external
  proxy-network:
    name: traefik-network
    driver: bridge
    external: true
EOF

# Generare override file for traefik, watchtower and network
COMPOSE_ADMIN_PROJECT_NAME="lab-admin"
COMPOSE_OVERRIDE_ADMIN_FILE="${RESOURCES_DIR}/compose-override-admin.yml"
cat << EOF > $COMPOSE_OVERRIDE_ADMIN_FILE
# --------------------------------------------------------------------------------------------------
#   AUTOGENERATED - DO NOT CHANGE
#
#   Stellars Jupyterlab DS Platform 
#   Project Home: https://github.com/stellarshenson/stellars-jupyterlab-ds
#   This compose file is used to set up admin project with admin services
#   It forces jupyterlab to only generate admin certificates and launch traefik & watchtower
# --------------------------------------------------------------------------------------------------
services:
  jupyterlab:
    # generate SSL certificates and enter idle mode
    entrypoint: "/bin/bash -c '/start-platform.d/00_generate_ssl_cert.sh && tail -f /dev/null'"  
    restart: no
EOF


# Check for dialog
if ! command -v dialog &> /dev/null; then
  echo "dialog command not found. Install it with: sudo apt install dialog"
  exit 1
fi

# this helps keep track of dialog choices
TMPFILE=$(mktemp)

# ---- Step 0: Prompt if new or existing ----

# Ask if new user or existing 
dialog --title "New or Existing Profile" --menu "Choose if we start existing or create new profile:" 12 60 2 \
  New "Create New Profile" \
  Existing "Use Existing Profile" 2> "$TMPFILE"
RESULT=$?
if [[ $RESULT == 1 ]]; then
    clear
    echo "Aborting..."
    exit 0
fi

PROFILE_TYPE=$(<"$TMPFILE")
rm "$TMPFILE"

# if existing profile
if [[ $PROFILE_TYPE == 'Existing' ]]; then
    # Dialog menu to select env file
    mapfile -t ENV_FILES < <(find ./resources -maxdepth 1 -name "*.env" | sort)
    if [ ${#ENV_FILES[@]} -eq 0 ]; then
      dialog --msgbox "No .env files found." 10 50
      clear
      exit 1
    fi
    
    MENU_OPTS=()
    for f in "${ENV_FILES[@]}"; do
      fname=$(basename "$f")
      MENU_OPTS+=("$fname" "")
    done
    
    CHOICE=$(dialog --menu "Select an env file to use:" 15 60 6 "${MENU_OPTS[@]}" 3>&1 1>&2 2>&3)
    ENV_FILE="resources/$CHOICE"
    COMPOSE_PROJECT_NAME=$(grep -E '^COMPOSE_PROJECT_NAME=' "$ENV_FILE" | cut -d '=' -f2-)
    JUPYTERLAB_SERVER_TOKEN=$(grep -E '^JUPYTERLAB_SERVER_TOKEN=' "$ENV_FILE" | cut -d '=' -f2-)
    LAB_USER=$(grep -E '^LAB_USER=' "$ENV_FILE" | cut -d '=' -f2-)
fi

# ---- Step 1: Prompt LAB_USER ----
if [[ $PROFILE_TYPE == 'New' ]]; then
    dialog --title "JupyterLab Environment Setup" --inputbox "
    Enter the LAB_USER name.
    
    This name will:
    - Uniquely identify the user.
    - Be used in service URLs (e.g., /<LAB_USER>/jupyterlab).
    - Isolate each user's data science environment.
    - Be stripped of spaces and special characters.
    
    Each user gets their own dedicated environment and a private URL.
    " 18 80 2> "$TMPFILE"
    RESULT=$?
    if [[ $RESULT == 1 ]]; then
	clear
        echo "Aborting..."
        exit 0
    fi

    LAB_USER=$(<"$TMPFILE")
    rm "$TMPFILE"
    
    # Sanitize LAB_USER
    LAB_USER=$(echo "$LAB_USER" | sed 's/\./-/g' | tr -cd '[:alnum:]-_')
    if [[ -z "$LAB_USER" ]]; then
      echo "Invalid LAB_USER. Must contain at least one alphanumeric character."
      exit 1
    fi
fi

# Generate Personal override compose file if doesn't exist
COMPOSE_PERSONAL_FILE="${RESOURCES_DIR}/compose-override-${LAB_USER}.yml"
[[ -f $COMPOSE_PERSONAL_FILE ]] || cat << EOF > $COMPOSE_PERSONAL_FILE
# --------------------------------------------------------------------------------------------------
#   Stellars Jupyterlab DS Platform 
#   Project Home: https://github.com/stellarshenson/stellars-jupyterlab-ds
#   This compose adds user specific configurable overrides  like extra services, volumes etc
# --------------------------------------------------------------------------------------------------
services:
    jupyterlab:

# EOF
EOF

# ---- Step 2: Prompt JUPYTERLAB_SERVER_TOKEN ----
if [[ $PROFILE_TYPE == 'New' ]]; then
    dialog --title "JupyterLab Server Token" --inputbox "
    Set the JupyterLab server token.

    This token will act as the login password.
    " 10 80 2> "$TMPFILE"
    RESULT=$?
    if [[ $RESULT == 1 ]]; then
	clear
        echo "Aborting..."
        exit 0
    fi

    JUPYTERLAB_SERVER_TOKEN=$(<"$TMPFILE")
    rm "$TMPFILE"

    if [[ -z "$JUPYTERLAB_SERVER_TOKEN" ]]; then
      echo "Server token cannot be empty."
      exit 1
    fi
fi

# ---- Step 3: Choose Compose Type ----
dialog --title "Select Environment Type" --menu "Choose your data science deployment platform:" 12 60 2 \
  1 "Platform for non-GPU systems" \
  2 "Platform for NVIDIA GPU systems" 2> "$TMPFILE"
CHOICE=$(<"$TMPFILE")
rm "$TMPFILE"

if [[ "$CHOICE" == "1" ]]; then
  COMPOSE_FILES_OPTS="-f ${RESOURCES_DIR}/compose.yml"
  ENV_DESC="Platform non-GPU systems"
elif [[ "$CHOICE" == "2" ]]; then
  COMPOSE_FILES_OPTS="-f ${RESOURCES_DIR}/compose.yml -f ${RESOURCES_DIR}/compose-gpu.yml"
  ENV_DESC="Platform for NVIDIA GPU systems"
else
  echo "Invalid selection."
  exit 1
fi

# ---- Step 4: Download Compose File if Missing ----
REPO_BASE_URL="https://raw.githubusercontent.com/stellarshenson/stellars-jupyterlab-ds/main"

clear
COMPOSE_FILES=$(echo $COMPOSE_FILES_OPTS | sed 's/-f//g')
for COMPOSE_FILE in $COMPOSE_FILES; do
    if [[ ! -f "$COMPOSE_FILE" ]]; then
      echo "Downloading $COMPOSE_FILE from $REPO_BASE_URL..."
      BASENAME_COMPOSE_FILE=$(basename $COMPOSE_FILE)
      curl -fsSL "$REPO_BASE_URL/$BASENAME_COMPOSE_FILE" -o "$COMPOSE_FILE"
      if [[ $? -ne 0 ]]; then
	echo "Failed to download $COMPOSE_FILE. Aborting."
	exit 1
      fi
    fi
done

# ---- Step 5: Project Name and Summary ----
if [[ $PROFILE_TYPE == 'New' ]]; then
    COMPOSE_PROJECT_NAME="lab-${LAB_USER}"
    ENV_FILE="${RESOURCES_DIR}/${COMPOSE_PROJECT_NAME}.env"
fi

dialog --title "Deployment Summary" --msgbox "
Environment: $ENV_DESC
Project Name: $COMPOSE_PROJECT_NAME
Server Token: $JUPYTERLAB_SERVER_TOKEN

URLs:
 - https://localhost/$COMPOSE_PROJECT_NAME/jupyterlab
 - https://localhost/$COMPOSE_PROJECT_NAME/tensorboard
 - https://localhost/$COMPOSE_PROJECT_NAME/mlflow
 - https://localhost/$COMPOSE_PROJECT_NAME/glances

Environment will be deployed using Docker Compose.
An env file named '$ENV_FILE' will be created.
" 20 80

# ---- Step 6: Confirm Deployment ----
dialog --title "Confirm Deployment" --yesno "
Shall we proceed with deployment of this environment?
" 10 80

if [[ $? -ne 0 ]]; then
  dialog --title "Aborted" --msgbox "Operation cancelled. No changes were made." 6 40
  clear
  exit 0
fi

# ---- Step 7: Create Env File ----
cat <<EOF > $TMPFILE
LAB_USER=$LAB_USER
JUPYTERLAB_SERVER_TOKEN=$JUPYTERLAB_SERVER_TOKEN
COMPOSE_PROJECT_NAME=$COMPOSE_PROJECT_NAME
EOF

if [[ $PROFILE_TYPE == 'New' ]]; then
    cp $TMPFILE $ENV_FILE
fi

# ---- Step 8: Deploy ----
clear

# check if traefik is running
docker ps --filter ancestor=traefik --format '{{.ID}}' | grep -q .
TRAEFIK_RUNNING=$((! $?))

# if watchtower and traefik are not running, start them
if [[ $TRAEFIK_RUNNING == 0 ]]; then
    echo "Traefik and Watchtower are not running, starting them now"
    COMPOSE_COMMAND="docker compose ${COMPOSE_FILES_OPTS} -f ${COMPOSE_OVERRIDE_ADMIN_FILE} up --no-recreate --no-build -d"
    echo "Executing command: $COMPOSE_COMMAND"
    COMPOSE_PROJECT_NAME=$COMPOSE_ADMIN_PROJECT_NAME LAB_USER='admin' $COMPOSE_COMMAND
fi

# make sure users labs are running without traefik and watchtowe
COMPOSE_FILES_OPTS="${COMPOSE_FILES_OPTS} -f ${COMPOSE_OVERRIDE_FILE}"

# add personal compose file to the list
if [[ -f $COMPOSE_PERSONAL_FILE ]]; then
    COMPOSE_FILES_OPTS="${COMPOSE_FILES_OPTS} -f ${COMPOSE_PERSONAL_FILE}"
fi

COMPOSE_COMMAND="docker-compose --env-file $ENV_FILE $COMPOSE_FILES_OPTS up  --no-recreate --no-build -d"
echo "Executing command: $COMPOSE_COMMAND"
$COMPOSE_COMMAND
echo "Press ENTER to continue..."
read

# ---- Step 9: Final Message ----
dialog --title "Deployment Complete" --msgbox "
Deployment successful.

Compose Profile: $ENV_DESC
Env File: $ENV_FILE

Access: https://localhost/$COMPOSE_PROJECT_NAME/jupyterlab
Token: $JUPYTERLAB_SERVER_TOKEN
" 12 80

clear

