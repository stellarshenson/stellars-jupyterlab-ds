# --------------------------------------------------------------------------------------------------
#
#   Stellars Jupyterlab DS Platform 
#   Project Home: https://github.com/stellarshenson/stellars-jupyterlab-ds
#   This compose file support both GPU and non-GPU platforms
#
#   Jupyter Lab      - https://localhost/<compose_name>/jupyterlab (running locally on port :8888)
#   Tensorboard      - https://localhost/<compose_name>/tensorboard (running locally on port :6006)
#   MLFlow           - https://localhost/<compose_name>/mlflow (running locally on port :5000) 
#   Glances          - https://localhost/<compose_name>/glances (running locally on port :61208)
#   Optuna           - https://localhost/<compose_name>/optuna (running locally on port :8080)
#   Generic app      - https://localhost/<compose_name>/generic-app (running locally on port :8080)
#   Generic callback - https://localhost/<compose_name>/generic-app (running locally on port :8030)
#
#   Example project .env file content:
#   COMPOSE_PROJECT_NAME=my-lab-platform
#   LAB_USER=jack_daniels
#   JUPYTERLAB_SERVER_TOKEN=my_secret_token123
#   GPU_SUPPORT_ENABLED=1
#   ENABLE_SERVICE_MLFLOW=1
#
# --------------------------------------------------------------------------------------------------

services:

  # Proxy for smart trafic routing to make it possible to host multiple similar containers 
  # exposing ports 80, 413 & 8080 to force docker to keep only one traefik service
  # traefik dashboard is available under http://localhost:8080/dashboard
  traefik:
    image: traefik:latest
    container_name: ${COMPOSE_PROJECT_NAME:-stellars-jupyterlab-ds}-traefik
    command:
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--api.dashboard=true"
      - "--api.insecure=true"  
      - "--providers.file.filename=/mnt/certs/certs.yml" # certificates generated by jupyterlab container
      - "--serverstransport.insecureskipverify=true" # required for https passthrough
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - vol_certs:/mnt/certs # named volume to hold certificates
    networks:
      - proxy-network
    depends_on:
      jupyterlab:
        condition: service_healthy
    restart: unless-stopped


  ## Run jupyterlab via traefic with glances, mlflow, optuna and tensorboard
  ## Services are mapped to distinct URLs using traefic proxy
  jupyterlab:
    container_name: ${COMPOSE_PROJECT_NAME:-stellars-jupyterlab-ds}-jupyterlab
    hostname: ${COMPOSE_PROJECT_NAME:-stellars-jupyterlab-ds}-jupyterlab
    image: stellars/stellars-jupyterlab-ds:latest
    build:
      context: services/jupyterlab
      dockerfile: Dockerfile.jupyterlab
    environment:
      - CONDA_DEFAULT_ENV=base
      - GPU_SUPPORT_ENABLED=0
      - JUPYTERLAB_STARTUP_MODE=jupyterlab
      - JUPYTERLAB_SERVER_IP=*
      - JUPYTERLAB_SERVER_TOKEN=${JUPYTERLAB_SERVER_TOKEN:-} # if token not provided - no passwor required
      - JUPYTERLAB_BASE_URL=/${COMPOSE_PROJECT_NAME:-stellars-jupyterlab-ds}/jupyterlab
      - TF_CPP_MIN_LOG_LEVEL=3 # tensorflow logs ERR only
      - TENSORBOARD_LOGDIR=/tmp/tensorboard
      - MLFLOW_TRACKING_URI=http://localhost:5000
      - MLFLOW_PORT=5000
      - MLFLOW_HOST=*
      - LAB_USER=${LAB_USER:-default}
      - LAB_NAME=${COMPOSE_PROJECT_NAME:-stellars-jupyterlab-ds}
      - ENABLE_SERVICE_MLFLOW=1
      - ENABLE_SERVICE_GLANCES=1
      - ENABLE_SERVICE_TENSORBOARD=1
    volumes:
      - vol_home:/home                    # jupyterlab user directory persistence
      - vol_workspace:/home/lab/workspace # user projects workspace volume persistence
      - vol_cache:/mnt/cache              # persistent cache volume for calculation results
      - vol_certs:/mnt/certs              # tsl certificates used by traefic and jupyterlab
      - vol_mlflow:/mnt/mlflow            # persistent mlflow volume for experiments logs
    networks:
      - proxy-network
    labels:
      # Enable proxy support from Traefik
      - "traefik.enable=true"

      # âš™ JupyterLab Service (8888)
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME:-stellars-jupyterlab-ds}-jupyterlab-rtr.rule=Path(`/${COMPOSE_PROJECT_NAME:-stellars-jupyterlab-ds}/jupyterlab`) || PathPrefix(`/${COMPOSE_PROJECT_NAME:-stellars-jupyterlab-ds}/jupyterlab/`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME:-stellars-jupyterlab-ds}-jupyterlab-rtr.entrypoints=websecure"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME:-stellars-jupyterlab-ds}-jupyterlab-rtr.service=${COMPOSE_PROJECT_NAME:-stellars-jupyterlab-ds}-jupyterlab-svc"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME:-stellars-jupyterlab-ds}-jupyterlab-rtr.tls=true"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME:-stellars-jupyterlab-ds}-jupyterlab-svc.loadbalancer.server.scheme=http"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME:-stellars-jupyterlab-ds}-jupyterlab-svc.loadbalancer.server.port=8888"

    ipc: host
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f jupyter-lab > /dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s

  ## watchtower for automatic docker image refresh
  ## exposing port to force docker to allow only one instance of service
  watchtower:
    container_name: ${COMPOSE_PROJECT_NAME:-stellars-jupyterlab-ds}-watchtower
    image: containrrr/watchtower:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --schedule "0 0 * * *" # run every day at midnight
    security_opt:
      - seccomp:unconfined #optional
    depends_on:
      jupyterlab:
        condition: service_healthy 
      traefik:
        condition: service_started
    ports:
      - "9911:9911"
    networks:
      - proxy-network
    restart: unless-stopped
    privileged: true

volumes:
  vol_workspace:
  vol_cache:
  vol_home:
  vol_mlflow:
  vol_certs: 

networks:
  proxy-network:
    name: traefik-network
    driver: bridge

# EOF

