# ----------------------------------------------------------------------------------------
#
#   Jupyterlab setup 
#
#   Jupyter Lab - https://localhost/lab/jupyterlab
#   Tensorboard - https://localhost/lab/tensorboard
#   MLFlow      - https://localhost/lab/mlflow
#   Glances     - https://localhost/lab/glances
#
# ----------------------------------------------------------------------------------------

services:

  # Proxy for smart trafic routing to make it possible
  # to host multiple similar containers 
  traefik:
    image: traefik:latest
    container_name: lab-${LAB_USER:-default}-traefik
    command:
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--api.dashboard=true"
      - "--api.insecure=true"  
      - "--providers.file.filename=/mnt/certs/certs.yml" # certificates generated by jupyterlab container
      - "--serverstransport.insecureskipverify=true" # required for https passthrough
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - lab_certs:/mnt/certs # named volume to hold certificates
    networks:
      - proxy-network
    depends_on:
      - lab
    restart: unless-stopped


  ## Run jupyterlab via traefic with glances, mlflow and tensorboard
  lab:
    container_name: lab-${LAB_USER:-default}-jupyterlab
    hostname: lab-${LAB_USER:-default}-jupyterlab
    image: stellars/stellars-jupyterlab-ds:latest
    build:
      context: build
      dockerfile: Dockerfile
    environment:
      - CONDA_DEFAULT_ENV=base
      - GPU_SUPPORT_ENABLED=1
      - JUPYTERLAB_SERVER_IP=*
      - JUPYTERLAB_SERVER_TOKEN=cyberstorm22
      - JUPYTERLAB_BASE_URL=/${LAB_USER:-default}/jupyterlab
      - TF_CPP_MIN_LOG_LEVEL=3
      - TENSORBOARD_LOGDIR=/tmp/tensorboard
      - MLFLOW_TRACKING_URI=http://localhost:5000
      - MLFLOW_PORT=5000
      - MLFLOW_HOST=*
      - LAB_USER=${LAB_USER:-default}
    labels:
      # Enable proxy support from Traefik
      - "traefik.enable=true"

      # ⚙ JupyterLab Service (8888)
      - "traefik.http.routers.jupyterlab-rtr.rule=Path(`/${LAB_USER:-default}/jupyterlab`) || PathPrefix(`/${LAB_USER:-default}/jupyterlab/`)"
      - "traefik.http.routers.jupyterlab-rtr.entrypoints=websecure"
      - "traefik.http.routers.jupyterlab-rtr.service=jupyterlab-svc"
      - "traefik.http.routers.jupyterlab-rtr.tls=true"
      - "traefik.http.services.jupyterlab-svc.loadbalancer.server.scheme=http"
      - "traefik.http.services.jupyterlab-svc.loadbalancer.server.port=8888"

      # ⚙ MLflow Service (5000)
      - "traefik.http.routers.mlflow-rtr.rule=Path(`/${LAB_USER:-default}/mlflow`) || PathPrefix(`/${LAB_USER:-default}/mlflow/`)"
      - "traefik.http.routers.mlflow-rtr.entrypoints=websecure"
      - "traefik.http.routers.mlflow-rtr.tls=true"        
      - "traefik.http.middlewares.mlflow-stripprefix.stripprefix.prefixes=/${LAB_USER:-default}/mlflow"
      - "traefik.http.middlewares.mlflow-redirectregex.redirectregex.regex=^(http[s]?://[^/]+)/${LAB_USER:-default}/mlflow$$"
      - "traefik.http.middlewares.mlflow-redirectregex.redirectregex.replacement=$${1}/${LAB_USER:-default}/mlflow/"
      - "traefik.http.middlewares.mlflow-chain.chain.middlewares=mlflow-redirectregex,mlflow-stripprefix"
      - "traefik.http.routers.mlflow-rtr.middlewares=mlflow-chain"
      - "traefik.http.routers.mlflow-rtr.service=mlflow-svc"
      - "traefik.http.services.mlflow-svc.loadbalancer.server.port=5000"

      # ⚙ Glances Service (61208)
      - "traefik.http.routers.glances-rtr.rule=Path(`/${LAB_USER:-default}/glances`) || PathPrefix(`/${LAB_USER:-default}/glances/`)"
      - "traefik.http.routers.glances-rtr.entrypoints=websecure"
      - "traefik.http.routers.glances-rtr.tls=true"        
      - "traefik.http.middlewares.glances-stripprefix.stripprefix.prefixes=/${LAB_USER:-default}/glances"
      - "traefik.http.middlewares.glances-redirectregex.redirectregex.regex=^(http[s]?://[^/]+)/${LAB_USER:-default}/glances$$"
      - "traefik.http.middlewares.glances-redirectregex.redirectregex.replacement=$${1}/${LAB_USER:-default}/glances/"
      - "traefik.http.middlewares.glances-chain.chain.middlewares=glances-redirectregex,glances-stripprefix"
      - "traefik.http.routers.glances-rtr.middlewares=glances-chain"
      - "traefik.http.routers.glances-rtr.service=glances-svc"
      - "traefik.http.services.glances-svc.loadbalancer.server.port=61208"

      # ⚙ TensorBoard Service (6006)
      - "traefik.http.routers.tensorboard-rtr.rule=Path(`/${LAB_USER:-default}/tensorboard`) || PathPrefix(`/${LAB_USER:-default}/tensorboard/`)"
      - "traefik.http.routers.tensorboard-rtr.entrypoints=websecure"
      - "traefik.http.routers.tensorboard-rtr.tls=true"        
      - "traefik.http.middlewares.tensorboard-stripprefix.stripprefix.prefixes=/${LAB_USER:-default}/tensorboard"
      - "traefik.http.middlewares.tensorboard-redirectregex.redirectregex.regex=^(http[s]?://[^/]+)/${LAB_USER:-default}/tensorboard$$"
      - "traefik.http.middlewares.tensorboard-redirectregex.redirectregex.replacement=$${1}/${LAB_USER:-default}/tensorboard/"
      - "traefik.http.middlewares.tensorboard-chain.chain.middlewares=tensorboard-redirectregex,tensorboard-stripprefix"
      - "traefik.http.routers.tensorboard-rtr.middlewares=tensorboard-chain"
      - "traefik.http.routers.tensorboard-rtr.service=tensorboard-svc"
      - "traefik.http.services.tensorboard-svc.loadbalancer.server.port=6006"
    networks:
      - proxy-network
    volumes:
      - lab_home:/home                    # jupyterlab user directory persistence
      - lab_workspace:/home/lab/workspace # user projects workspace volume persistence
      - lab_cache:/mnt/cache              # persistent cache volume for calculation results
      - lab_certs:/mnt/certs              # tsl certificates used by traefic and jupyterlab
      - lab_mlflow:/mnt/mlflow            # persistent mlflow volume for experiments logs
    ipc: host
    restart: unless-stopped

  # for automatic environment refresh
  watchtower:
    container_name: lab-${LAB_USER:-default}-watchtower
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 3600
    security_opt:
      - seccomp:unconfined #optional
    restart: unless-stopped
    privileged: true

  # obsidian notebook for managing markdown documentation
  # obsidian:
  #  image: lscr.io/linuxserver/obsidian:latest
  #  container_name: lab-obsidian
  #  environment:
  #    - PUID=1000
  #    - PGID=1000
  #  volumes:
  #    - obsidian:/config
  #    - workspace:/config/workspace
  #  ports:
  #    - 3000:3000
  #    - 3001:3001
  #  networks:
  #    - frontend
  #  shm_size: "1gb"
  #  restart: unless-stopped

  # mermaid online diagramming
  # mermaid:
  #  image: ghcr.io/mermaid-js/mermaid-live-editor
  #  container_name: lab-mermaid
  #  ports:
  #    - 9080:8080
  #  networks:
  #    - frontend
  #  restart: unless-stopped

volumes:
  lab_workspace:
  lab_cache:
  lab_home:
  lab_mlflow:
  lab_certs: 
  # obsidian:

networks:
  proxy-network:
    name: traefik-network
    driver: bridge

# EOF
